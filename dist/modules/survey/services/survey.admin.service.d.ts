import { CacheService } from '@common/cache/services/cache.service';
import { BaseFilterParamDto } from '@common/database/dtos/base-filter.dto';
import { ListPaginate } from '@common/database/types/database.type';
import { EventGuest } from '@modules/event/repository/entities/event-guest.entity';
import { EventService } from '@modules/event/services/event.service';
import { EventGuestService } from '@modules/event/services/event-guest.service';
import { FormQuestionRepository } from '@modules/form-question/repository/repositories/form-question.repository';
import { ViewMultiChoiceRepository } from '@modules/form-question/repository/repositories/view-multi-choice.repository';
import { ViewPercentageRepository } from '@modules/form-question/repository/repositories/view-percentage.repository';
import { ViewSingleChoiceRepository } from '@modules/form-question/repository/repositories/view-single-choice.repository';
import { ViewTextRepository } from '@modules/form-question/repository/repositories/view-text.repository';
import { FormQuestionService } from '@modules/form-question/services/form-question.service';
import { QuestionService } from '@modules/question/services/question.service';
import { I18nService } from 'nestjs-i18n';
import { ChartDto } from '../dtos/chart-report.dto';
import { CreateSurveyFormDto } from '../dtos/create-survey.dto';
import { FilterSurveyDto } from '../dtos/filter-survey.dto';
import { FilterParticipantDto } from '../dtos/participant-report-filter.dto';
import { UpdateSurveyFormDto } from '../dtos/update-survey.dto';
import { BarChartResponse, DetailResponse, LineChartResponse, OverviewResponse, ShortAnswerResponse } from '../interfaces/report-survey-response.interface';
import { Survey } from '../repository/entities/survey.entity';
import { SurveyRepository } from '../repository/repositories/survey.repository';
export declare class SurveyAdminService {
    private readonly cacheService;
    private readonly eventService;
    private readonly eventGuestService;
    private readonly questionService;
    private readonly surveyRepository;
    private readonly formQuestionRepository;
    private readonly viewMultiChoiceRepository;
    private readonly viewSingleChoiceRepository;
    private readonly viewTextRepository;
    private readonly viewPercentageRepository;
    private readonly formQuestionService;
    private eventMessage;
    private surveyMessage;
    constructor(i18nService: I18nService, cacheService: CacheService, eventService: EventService, eventGuestService: EventGuestService, questionService: QuestionService, surveyRepository: SurveyRepository, formQuestionRepository: FormQuestionRepository, viewMultiChoiceRepository: ViewMultiChoiceRepository, viewSingleChoiceRepository: ViewSingleChoiceRepository, viewTextRepository: ViewTextRepository, viewPercentageRepository: ViewPercentageRepository, formQuestionService: FormQuestionService);
    getList(params: FilterSurveyDto): Promise<ListPaginate<Survey>>;
    getById(id: number): Promise<Survey>;
    create(input: CreateSurveyFormDto): Promise<void>;
    update(input: UpdateSurveyFormDto): Promise<void>;
    toggle(id: number): Promise<void>;
    copy(id: number): Promise<void>;
    _getINCRCode(): Promise<string>;
    getListRport(params: BaseFilterParamDto): Promise<ListPaginate<Survey>>;
    getListParticipantReport(params: FilterParticipantDto): Promise<ListPaginate<EventGuest>>;
    getOverviewReport(id: number): Promise<OverviewResponse>;
    getDetailReport(id: number): Promise<DetailResponse[]>;
    getBarChart(param: ChartDto, id: number): Promise<BarChartResponse>;
    getShortAnswer(param: ChartDto, id: number): Promise<ShortAnswerResponse[]>;
    getLineChart(param: ChartDto, id: number): Promise<LineChartResponse>;
}
